COURSE="""CREATE TABLE IF NOT EXISTS course(
    course_id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1000)PRIMARY KEY,
    course_name VARCHAR,
    academic_year INT,
    sem INT);"""

STAFF="""CREATE TABLE IF NOT EXISTS staff(
    staff_id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 2000)PRIMARY KEY,
    staff_name VARCHAR,
    roll_number INT,
    role_id INT,
    email_id VARCHAR,
    password VARCHAR,
    FOREIGN KEY (role_id) REFERENCES role(role_id));"""

AUTHORIZED_STAFF="""CREATE TABLE IF NOT EXISTS authorized_staff(
    authorized_staff_id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 9000)PRIMARY KEY,
    staff_name VARCHAR,
    roll_number INT,
    email_id VARCHAR);"""


ROLE="""CREATE TYPE status AS ENUM ('ACTIVE', 'INACTIVE');CREATE TABLE IF NOT EXISTS role(
    role_id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 3000)PRIMARY KEY,
    role_name VARCHAR,
    status status);"""

CLASSROOM="""CREATE TABLE IF NOT EXISTS classroom (
    classroom_id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 4000)PRIMARY KEY,
    classroom_name VARCHAR,
    academic_year INT);"""

TIME_SLOT="""CREATE TABLE IF NOT EXISTS time_slot(
    time_slot_id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 5000)PRIMARY KEY,
    day_of_week VARCHAR,
    slot_time  VARCHAR );"""

CLASSROOM_COURSES="""CREATE TABLE IF NOT EXISTS classroom_courses (
    classroom_courses_id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 6000)PRIMARY KEY, 
    course_id INT,
    classroom_id INT,
    status status,
    minimum_period_count_per_week INT,
    FOREIGN KEY (classroom_id) REFERENCES classroom(classroom_id),
    FOREIGN KEY (course_id) REFERENCES course(course_id));"""


STAFF_TEACHING_COURSES="""CREATE TABLE IF NOT EXISTS staff_teaching_courses(
    staff_id INT,
    course_id INT,
    status status,
    acadamic_year INT,
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id),
    FOREIGN KEY (course_id) REFERENCES course(course_id));"""

TIME_SLOT_BOOKING="""CREATE TABLE IF NOT EXISTS time_slot_booking(
    time_slot_booking INT GENERATED BY DEFAULT AS IDENTITY(START WITH 6000)PRIMARY KEY,
    time_slot_id INT,
    staff_id INT,
    classroom_courses_id INT,
    classroom_id INT,
    course_id INT,
    FOREIGN KEY (course_id) REFERENCES course(course_id),
    FOREIGN KEY (classroom_courses_id) REFERENCES classroom_courses(classroom_courses_id),
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id),
    FOREIGN KEY (time_slot_id) REFERENCES time_slot(time_slot_id),
    unique(time_slot_id,staff_id),
    unique(time_slot_id,classroom_id),
    unique(classroom_id,staff_id,classroom_courses_id));"""

def insert_query_marker(table_name,info_dict):
    columns=", ".join(info_dict.keys())
    values=", ".join(info_dict.values())
    tuple_fields=(table_name,columns,values)
    INSERT_QUERY = "INSERT INTO %s (%s) VALUES (%s)" % tuple_fields
    return INSERT_QUERY

FETCH_LOGIN_USERS="select json_agg(items)::jsonb from (select * from staff where email_id='%s')items"

FETCH_AUTHORIZED_USERS = "select * from authorized_staff where roll_number=%s "

FETCH_SELECT_STAFF ="select json_agg(items)::jsonb from (select * from staff as s inner join role as r on s.role_id=r.role_id where s.email_id='%s')items"

DELETE_STAFF="delete from staff where staff_id='%s'"
DELETE_STAFF_COURSES="delete from staff_teaching_courses where staff_id='%s'"
DELETE_AUTHORIZED_STAFF="delete from authorized_staff where email_id='%s'"

DELETE_COURSE="delete from course where  course_id='%s'"
DELETE_CLASSROOM_COURSE="delete from classroom_courses where  course_id='%s'"

UPDATE_COURSE="UPDATE course set course_name='%s' where course_id=%s"

FETCH_COURSE_DETAILS="select * from course"

FETCH_ALL_STAFF_DETAILS="select * from staff"

FETCH_TIME_SLOT="select * from time_slot"

FETCH_CLASSROOM="select * from classroom"

FETCH_CLASSROOM_COURSES="select * from classroom_courses where classroom='%s'"

UPDATE_STAFF="UPDATE staff set staff_name='%s' where staff_id=%s"

FETCH_SEM="select sem_type from sem_table where status='ACTIVE'"

FETCH_TIME_SLOT = "select json_agg(items)::jsonb from (select * from time_slot)items"




